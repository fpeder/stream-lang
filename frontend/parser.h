// Generated by Bisonc++ V4.05.00 on Sun, 25 May 2014 14:03:00 -0700

#ifndef streamParser_h_included
#define streamParser_h_included

// $insert baseclass
#include "parserbase.h"
// $insert scanner.h
#include "scanner.h"

#include "ast.hpp"

// $insert namespace-open
namespace stream
{

#undef Parser
class Parser: public ParserBase
{
    // $insert scannerobject
    Scanner d_scanner;
    ast::semantic_value d_ast;

    public:
        Parser( std::istream & stream ):
            d_scanner(stream)
        {}

        int parse();
        ast::semantic_value ast() { return d_ast; }

    private:
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
        void print__();
        void exceptionHandler__(std::exception const &exc);
};

// $insert namespace-close
}

#endif
